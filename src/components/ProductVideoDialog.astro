---
import { Icon } from 'astro-icon/components'
export interface Props {
  video: {
    url: string
    title: string
    cover: string
  }
}

const { video } = Astro.props

// class="fixed z-50 inset-0 w-full h-full bg-black backdrop:bg-white backdrop:backdrop-blur"
---

<li class=''>
  <button
    id='show-dialog-btn'
    class='size-[55px] flex items-center justify-center focus-visible:outline-none'>
    <Icon
      name='tabler:play'
      size={30}
    />
  </button>
  <dialog>
    <div class='max-w-sm md:max-w-3xl relative'>
      <video
        class='w-full h-full'
        id='player'
        playsinline
        controls
        poster={video.cover}
        data-poster={video.cover}>
        <source
          src={video.url}
          type='video/mp4'
        />
      </video>
      <source
        src='/path/to/video.webm'
        type='video/webm'
      />
      <button
        id='close-dialog-btn'
        class='absolute top-1 right-1 size-7 bg-background flex items-center justify-center rounded-full'>
        <Icon name='tabler:x' />
      </button>
    </div>
  </dialog>
</li>
<style>
  /*   Open state of the dialog  */
  dialog[open] {
    opacity: 1;
    transform: scaleY(1);
  }

  /*   Closed state of the dialog   */
  dialog {
    opacity: 0;
    inset: 0;
    margin: auto;
    transform: scaleY(0);
    transition:
      opacity 0.7s ease-out,
      transform 0.7s ease-out,
      overlay 0.7s ease-out allow-discrete,
      display 0.7s ease-out allow-discrete;
    /* Equivalent to
  transition: all 0.7s allow-discrete; */
  }

  /*   Before-open state  */
  /* Needs to be after the previous dialog[open] rule to take effect,
    as the specificity is the same */
  @starting-style {
    dialog[open] {
      opacity: 0;
      transform: scaleY(0);
    }
  }

  /* Transition the :backdrop when the dialog modal is promoted to the top layer */
  dialog::backdrop {
    background-color: rgb(0 0 0 / 0%);
    transition:
      display 0.7s allow-discrete,
      overlay 0.7s allow-discrete,
      background-color 0.7s;
    /* Equivalent to
  transition: all 0.7s allow-discrete; */
  }

  dialog[open]::backdrop {
    background-color: rgb(0 0 0 / 85%);
  }

  /* This starting-style rule cannot be nested inside the above selector
because the nesting selector cannot represent pseudo-elements. */

  @starting-style {
    dialog[open]::backdrop {
      background-color: rgb(0 0 0 / 0%);
    }
  }
</style>

<link
  rel='stylesheet'
  href='https://cdn.plyr.io/3.7.8/plyr.css'
/>
<style is:global>
  :root {
    --plyr-color-main: oklch(var(--primary));
  }
</style>
<script>
  import Plyr from 'plyr'
  document.addEventListener('astro:page-load', () => {
    const player = new Plyr('#player')
    const $showDialogBtn = document.querySelector('#show-dialog-btn') as HTMLButtonElement
    const $closeDialogBtn = document.querySelector('#close-dialog-btn')!
    const $dialogEl = document.querySelector('dialog')!

    if (!$showDialogBtn) return

    $showDialogBtn.addEventListener('click', () => {
      $dialogEl.showModal()
    })

    $closeDialogBtn.addEventListener('click', () => {
      $dialogEl.close()
      player.pause()
    })
  })
</script>
