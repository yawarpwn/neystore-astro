---
import { Icon } from 'astro-icon/components'
import ProductShareButton from '@/components/ProductShareButton.astro'

import ProductVideoDialog from '@/components/ProductVideoDialog.astro'
interface Props {
  images: { url: string; thumb: string }[]
  id: string
  title: string
  video?: {
    url: string
    title: string
    cover: string
  } | null
}

const { images, id, title, video } = Astro.props
---

<article class='image-view-wrap w-[calc(100vw-2rem)] md:w-full md:mt-6'>
  {/* Main */}
  <div
    id='main-image'
    class='image-view--previewWrap relative rounded-md overflow-hidden'>
    <div class='absolute top-1 right-1 z-10'>
      <ProductShareButton />
    </div>
    <div class='image-view--previewBox absolute left-0 top-0 w-full h-full'>
      <div class='maginifier--wrap w-full h-full bg-white'>
        <img
          transition:name={`product-image-${id}`}
          class='magnifier-image max-w-full max-h-full w-full h-full object-contain'
          src={images[0].url}
          alt={title}
        />
      </div>
    </div>
    <div class='image-view--previewCover pt-[100%]'> </div>
  </div>

  {/* Thumbs */}
  <div class='slider-wrap relative'>
    {/* Container */}
    <div class='slider--slider mt-4 overflow-x-auto snap-x snap-mandatory'>
      <ul class='slider--box flex'>
        {
          images.map((img, index) => {
            if (index === 3 && video?.url) {
              return <ProductVideoDialog video={video} />
            }

            return (
              <li
                data-thumb-active={index === 0}
                data-large-url={img.url}
                class={`slider--img border-2 border-transparent opacity-50 size-[64px] flex-shrink-0 bg-white 
                  flex items-center justify-center rounded-md overflow-hidden ml-2 first:ml-0 cursor-pointer
                  data-[thumb-active]:border-primary data-[thumb-active]:opacity-100 `}>
                <img
                  class='max-w-full max-h-full'
                  src={img.thumb}
                />
              </li>
            )
          })
        }
      </ul>
    </div>
    <button
      aria-label='imagen anterior'
      class={`slider--prev absolute left-0 top-0 w-[36px] h-[64px] 
  cursor-pointer
  hidden items-center justify-start bg-gradient-to-l from-transparent to-[oklch(var(--background))]`}>
      <span>
        <Icon
          name='tabler:chevron-left'
          class='text-primary'
        />
      </span>
    </button>
    <button
      aria-label='imagen siguiente'
      class={`slider--next absolute right-0 top-0 w-[36px] h-[64px] 
cursor-pointer
items-center justify-end bg-gradient-to-r from-transparent to-[oklch(var(--background))] hidden`}>
      <span>
        <Icon
          name='tabler:chevron-right'
          class='text-primary'
        />
      </span>
    </button>
  </div>
</article>
<script>
  document.addEventListener('astro:page-load', () => {
    const thumbsList = document.querySelectorAll('.slider--img') as NodeListOf<Element>
    const slider = document.querySelector('.slider--slider') as HTMLDivElement
    const mainImage = document.querySelector('#main-image img') as HTMLDivElement
    const nextSlide = document.querySelector('.slider--next') as HTMLButtonElement
    const prevSlide = document.querySelector('.slider--prev') as HTMLButtonElement

    //check prev and next button visibility
    function updateButtonsVisibility() {
      const maxScrollLeft = slider.scrollWidth - slider.clientWidth
      nextSlide.style.display = slider.scrollLeft >= maxScrollLeft ? 'none' : 'flex'
      prevSlide.style.display = slider.scrollLeft <= 0 ? 'none' : 'flex'
    }

    updateButtonsVisibility()

    thumbsList.forEach((item) => {
      item.addEventListener('click', () => {
        //Remove active  all items
        thumbsList.forEach((item) => item.removeAttribute('data-thumb-active'))
        //Add active to current item
        item.toggleAttribute('data-thumb-active')

        //get image Src
        const src = item.getAttribute('data-large-url')!

        //update image
        mainImage.setAttribute('src', src)
      })
    })

    //handle scroll
    slider.addEventListener('scroll', () => {
      updateButtonsVisibility()
    })

    //TODO:
    //handle mobile slide
    let isTouchMove = false
    let startX = 0

    slider.addEventListener('touchstart', (event) => {
      console.log('touchstart')
      isTouchMove = false
      startX = event.touches[0].clientX
    })

    slider.addEventListener('touchmove', (event) => {
      console.log('touchmove')
      isTouchMove = true
      const deltaX = event.touches[0].clientX - startX

      // Prevent horizontal scrolling on the entire page on mobile
      event.preventDefault()

      // Update slider scroll position based on touch movement direction
      slider.scrollLeft += deltaX
    })

    slider.addEventListener('touchend', (event) => {
      console.log('touchend')
      if (!isTouchMove) return // Ignore tap events

      const threshold = slider.clientWidth / 3 // Adjust threshold for swipe sensitivity

      if (Math.abs(startX - event.changedTouches[0].clientX) > threshold) {
        // Perform swipe logic:
        if (startX - event.changedTouches[0].clientX > threshold) {
          // Swipe left: Move to next slide
          slider.scrollBy(64, 0)
        } else {
          // Swipe right: Move to previous slide
          slider.scrollBy(-64, 0)
        }
      }

      isTouchMove = false
    })

    //handle next Slide
    nextSlide.addEventListener('click', () => {
      slider.scrollBy(64, 0)
    })

    // handle prev Slide
    prevSlide.addEventListener('click', () => {
      slider.scrollBy(-64, 0)
    })

    window.addEventListener('resize', () => {
      updateButtonsVisibility()
    })
  })
</script>
